<?php
    namespace Octo;

    ini_set('error_reporting', E_ALL);
    ini_set('display_errors', true);

    $ini = parse_ini_file(__DIR__ . '/.env');

    defined('APPLICATION_ENV') || define('APPLICATION_ENV', isset($ini['APPLICATION_ENV']) ? $ini['APPLICATION_ENV'] : 'production');
    defined('SITE_NAME') || define('SITE_NAME', isset($ini['SITE_NAME']) ? $ini['SITE_NAME']         : 'project');

    require_once realpath(__DIR__) . '/vendor/autoload.php';

    path("app", realpath(__DIR__ . '/app'));
    path("base", realpath(__DIR__));

    systemBoot(__DIR__);

    try {
        Octo::cli();
    } catch (\Exception $e) {
        $debug = Config::get("debug", true);

        if (true === $debug) {
            ob_start();
            echo '<h1><i class="fa fa-info-circle fa-2x"></i> Infos</h1>';
            $infos = Registry::get('BACKTRACE', $e->getTrace());
            echo '<pre>';
            var_dump($infos);
            echo '</pre>';

            $trace = ob_et_clean();

            $html = '<h1><i class="fa fa-warning fa-2x"></i> Error to boot Octo</h1>';
            $html .= 'Please read the next message to fix.';
            $html .= '<div style="margin-top: 15px;" class="alert alert-danger">
            ' . $e->getMessage();

            if (!Registry::has('BACKTRACE')) {
                $html .= '<hr>in ' . $e->getFile() . ' (line: ' . $e->getLine() . ')';
            }

            $html .= '</div><hr>' . $trace . '';

            view($html, 500, 'Octo Error Report');
        }
    }

    if (count($argv) > 1) {
        new Octolabs($argv);
    } else {
        Cli::show("Octolab requires an action", 'ERROR');
    }
